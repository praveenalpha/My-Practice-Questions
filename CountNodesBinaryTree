#include<iostream>
#include<queue>
using namespace std;
class binary_node {
public:
	int data;
	binary_node* left;
	binary_node* right;
	binary_node(int data)
	{
		this->data = data;
		left = nullptr;
		right = nullptr;
	}
};
binary_node* take_input_level_wise()
{
	int data;
	cout << "enter root data: " << endl;
	cin >> data;
	binary_node* root = new binary_node(data);
	queue < binary_node*> pending_nodes;
	pending_nodes.push(root);
	while (pending_nodes.size() != 0)
	{
		int left_child;
		binary_node* front = pending_nodes.front();
		cout << "enter left child of "<<front->data<<" : "  << endl;
		cin >> left_child;
		if (left_child != -1)
		{
			binary_node* Lchild = new binary_node(left_child);
			pending_nodes.push(Lchild);
			front->left = Lchild;
		}
		int right_child;
		cout << "enter right child  " << front->data << " : " << endl;
		cin >> right_child;
		if (right_child != -1)
		{
			binary_node* Rchild = new binary_node(right_child);
			pending_nodes.push(Rchild);
			front->right = Rchild;
		}
		pending_nodes.pop();

	}
	return root;
}
int count_nodes(binary_node* root)
{
	if (root == nullptr)
		return 0;
	return 1 + count_nodes(root->left) + count_nodes(root->right) ;
}
void print_level_wise(binary_node* root)
{
	queue<binary_node*> pending_nodes;
	pending_nodes.push(root);
	while (pending_nodes.size() != 0)
	{
		binary_node* front = pending_nodes.front();
		cout << front->data << ":";
		if (front->left != nullptr)
		{
			cout << "L" << front->left->data << ",";
			pending_nodes.push(front->left);
		}
		if (front->right != nullptr)
		{
			cout << "R" << front->right->data;
			pending_nodes.push(front->right);
		}
		cout << endl;
		pending_nodes.pop();
	}

}
int main()
{
	binary_node* root=take_input_level_wise();
	print_level_wise(root);
	cout <<"number of nodes are :"<< count_nodes(root)<<endl;
	return 0;
}
