#include<iostream>
#include<vector>
#include<stack>

using namespace std;


// generic tree
class node{
public:
    int data;
    vector<node*> children;

};

class generic_tree{
public:
    // create generic tree
    node* create_tree(vector<int>& arr){
        stack<node*> st;
        node* root = new node();
        for(int i=0;i<arr.size();i++){
            if(st.size() != 0 && arr[i] == -1){
                st.pop();
            }
            else{
                node* newNode = new node();
                newNode->data = arr[i];
                if(st.size() == 0){
                    root->data = arr[i];
                    st.push(root);
                }
                else{
                    node* st_node = st.top();
                    st_node->children.push_back(newNode);
                    st.push(newNode);
                }
            }
        }
        return root;
    }
    void display(node* root){
        if(root != nullptr){
            cout<<root->data<<" ";
            for(node* n : root->children){
                display(n);
            }
        }
    }
};


int main(){
    vector<int> arr = {1, 2, -1, 3, -1, -1};
    generic_tree* my_tree = new generic_tree();
    node* root = my_tree->create_tree(arr);
    my_tree->display(root);
    return 0;
}
