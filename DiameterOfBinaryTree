#include<iostream>
#include<queue>
using namespace std;
class binary_node {
public:
	int data;
	binary_node* left_child;
	binary_node* right_child;
	binary_node(int data)
	{
		this->data = data;
		left_child = nullptr;
		right_child = nullptr;
	}
};
/*void print(binary_node* root)
{
	if (root == nullptr)
		return;

	cout << root->data << ":";

	if(root->left_child!=nullptr)
		cout <<"L"<< root->left_child->data;
	
	if (root->left_child != nullptr)
		cout << "R" << root->right_child->data;
	cout << endl;
	print(root->left_child);
	print(root->right_child);
}
binary_node* take_input()
{
	int data;
	cout << "enter data" << endl;
	cin >> data;
	if (data == -1)
		return nullptr;
	binary_node* root = new binary_node(data);
	binary_node* left_child = take_input();
	binary_node* right_child = take_input();
	root->left_child = left_child;
	root->right_child = right_child;
	return root;
}*/
binary_node* take_input_level_wise()
{
	int data;
	cout << "enter root data : " << endl;
	cin >> data;
	binary_node* root = new binary_node(data);
	queue<binary_node*> pending_nodes;
	pending_nodes.push(root);
	while (pending_nodes.size() != 0)
	{
		binary_node* front = pending_nodes.front();
		int left;
		cout << "enter left data of : " << front->data<<endl;
		cin >> left;
		if (left != -1)
		{
			binary_node* Lchild = new binary_node(left);
			front->left_child = Lchild;
			pending_nodes.push(Lchild);
		}
		int right;
		cout << "enter right child of : " << front->data << endl;
		cin >> right;
		if (right != -1)
		{
			binary_node* Rchild = new binary_node(right);
			front->right_child = Rchild;
			pending_nodes.push(Rchild);

		}
		pending_nodes.pop();
	}
	return root;
}
void print_level_wise(binary_node* root)
{
	queue<binary_node*> pending_nodes;
	pending_nodes.push(root);
	while (pending_nodes.size() != 0)
	{
		binary_node* front = pending_nodes.front();
		cout << front->data << ":";
		if (front->left_child != nullptr)
			cout << "L"<<front->left_child->data;
		if (front->right_child != nullptr)
			cout << "R"<<front->right_child->data;
		cout << endl;
		pending_nodes.pop();
		pending_nodes.push(front->left_child);
		pending_nodes.push(front->right_child);
	}
}
/*int count_nodes(binary_node* root)
{
	if(root == nullptr)
		return 0;
	return 1 + count_nodes(root->left_child) + count_nodes(root->right_child);
}
void print_inordered(binary_node* root)
{
	if (root == nullptr)
		return;
	print_inordered(root->left_child);
	cout << root->data<<endl;
	print_inordered(root->right_child);
}/*
void print_preordered(binary_node* root)
{
	if (root == nullptr)
		return;
	cout << root->data << endl;
	print_preordered(root->left_child);
	print_preordered(root->right_child);

}
void print_postordered(binary_node* root)
{
	if (root == nullptr)
		return;
	print_postordered(root->left_child);
	print_postordered(root->right_child);
	cout << root->data << endl;
}*/
binary_node* build_tree_helper(int* In, int* Pre, int InS, int InE, int PreS, int PreE)
{
	if (InS > InE)
		return nullptr;
	int root_data = Pre[PreS];
	int root_index = -1;
	for (int i = InS; i < InE; i++)
	{
		if (In[i] == root_data)
		{
			root_index = i;
			break;
		}
	}
	int lInS = InS;
	int rPreE = PreE;
	int rInE = InE;
	int lInE = root_index - 1;
	int rInS = root_index + 1;
	int lPreS = PreS + 1;
	int lPreE = lInE - lInS + lPreS;
	int rPreS = lPreE + 1;
	binary_node* root = new binary_node(root_data);
	root->left_child = build_tree_helper(In, Pre, lInS, lInE, lPreS, lPreE);
	root->right_child = build_tree_helper(In, Pre, rInS, rInE, rPreS, rPreE);
	return root;
}
binary_node* build_tree(int* In, int* Pre, int size)
{
	return build_tree_helper(In, Pre, 0, size - 1, 0, size - 1);
}
/*
pair<int, int> diameter(binary_node* root)
{
	if (root == nullptr)
	{
		pair<int, int> p;
		p.first = 0;
		p.second = 0;
		return p;
	}
	pair<int, int> left_ans = diameter(root->left_child);
	pair<int, int> right_ans = diameter(root->right_child);
	int ld = left_ans.second;
	int lh = left_ans.first;
	int rd = right_ans.second;
	int rh = right_ans.first;
	int height = 1 + max(lh, rh);
	int diameter = max(lh + rh, max(ld, rd));
	pair<int, int> p;
	p.first=height;
	p.second=diameter;
	return p;

}*/
pair<int, int> height_diameter(binary_node* root)
{
	if (root == nullptr)
	{
		pair<int, int> p;
		p.first = 0;
		p.second = 0;
		return p;
	}
	pair<int, int> p;
	p = height_diameter(root->left_child);
	int lh =  p.first;
	int ld = p.second;
	p = height_diameter(root->right_child);
	int rh = p.first;
	int rd = p.second;
	int height = 1 + max(lh, rh);
	int diameter = max((lh + rh), max(ld, rd));
	pair<int, int> ans;
	ans.first = height;
	ans.second = diameter;
	return ans;

}
int main()
{

	//int In[] = { 4,2,5,1,8,6,9,3,7 };
	//int Pre[] = { 1,2,4,5,3,6,8,9,7 };
	//binary_node* root = build_tree(In, Pre, 9);
	//print_level_wise(root);

	//int nodes_are = count_nodes(root);
	//cout << "number of nodes are : " << nodes_are << endl;
	binary_node* root = take_input_level_wise();
	pair<int, int> p = height_diameter(root);
	cout << "height :" << p.first << endl;
	cout << "diameter :" << p.second << endl;
	delete root;
	return 0;
}
