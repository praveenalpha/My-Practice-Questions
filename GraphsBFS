void printBFS(int** edges, int n, int sv)
{
	queue<int> pendingVertices;
	bool* visited = new bool[n];
	for (int i = 0; i < n; i++)
	{
		visited[i] = false;
	}
	pendingVertices.push(sv);
	visited[sv] = true;
	while (!pendingVertices.empty())
	{
		int currentVertex = pendingVertices.front();
		pendingVertices.pop();
		cout << currentVertex << endl;
		for (int i = 0; i < n; i++)
		{
			if (edges[currentVertex][i] == 1 && !visited[i])
			{
				pendingVertices.push(i);
				visited[i] = true;
			}
		}
	}
}
int main()
{
	int n;
	cout << "enter number of vertices" << endl;
	cin >> n;
	int e;
	cout << " enetr number of edges" << endl;
	cin >> e;
	int** edges = new int* [n];
	for (int i = 0; i < n; i++)
	{
		edges[i] = new int [n];
		for (int j = 0; j < n; j++)
		{
			edges[i][j] = 0;
		}
	}
	for (int i = 0; i < n; i++)
	{
		int f, s;
		cin >> f >> s;
		edges[f][s] = 1;
		edges[s][f] = 1;
	}
	bool* visited = new bool[n];
	for (int i = 0; i < n; i++)
	{
		visited[i] = false;
	}
	print(edges, n, 0, visited);
	printBFS(edges, n, 0);
	delete[] visited;
	for (int i = 0; i < n; i++)
	{
		delete[] edges[i];
	}
	delete[] edges;
	return 0;
}
