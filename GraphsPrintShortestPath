#include<iostream>
#include<map>
#include<list>
#include<queue>
using namespace std;
template<typename t>
class graph {
	map<t, list<t>> adjList;
public:
	graph()
	{

	}
	void addEdges(t u, t v, bool bidir = true)
	{
		adjList[u].push_back(v);
		if (bidir)
			adjList[v].push_back(u);
	}
	void print()
	{
		for (auto i : adjList)
		{
			cout << i.first << "->";
			for (auto list : i.second)
				cout << list << ", ";;
			cout << '\n';
		}
	}
	int BFS(t src, t dest)
	{
		map<t, int> dist;
		map<t, t> parent;
		queue<t> q;
		for (auto i : adjList)
			dist[i.first] = INT_MAX;
		dist[src] = 0;
		q.push(src);
		parent[src] = src;
		while (!q.empty())
		{
			t node = q.front();
			q.pop();
			for (auto neighbour : adjList[node])
			{
				if (dist[neighbour] == INT_MAX)
				{
					dist[neighbour] = 1 + dist[node];
					q.push(neighbour);
					parent[neighbour] = node;
				}
			}
		}
		t temp = dest;
		while (temp != src)
		{
			cout << temp << "<--";
			temp = parent[temp];
		}
		cout << temp<<'\n';
		return dist[dest];
	}
};
int main()
{
	graph<int> g;
	int board[50] = { 0 };
	board[2] = 13;
	board[5] = 2;
	board[9] = 18;
	board[18] = 11;
	board[17] = -13;
	board[20] = -14;
	board[24] = -8;
	board[25] = -10;
	board[32] = -2;
	board[34] = -22;
	//LETS CONSTRUCT THE GRAPH ,ADD PAIR OF U AND V
	for (int u = 0; u <= 36; u++)
	{
		for (int dice = 1; dice <= 6; dice++)
		{
			int v = u + dice + board[u + dice];
			g.addEdges(u, v, false);
		}
	}
	cout << "THE SHORTEST DISTANCE IS " << g.BFS(1, 36) << '\n';
	return 0;
}
