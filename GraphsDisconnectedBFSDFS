#include<iostream>
#include<queue>
using namespace std;
void printDFS(int** edges, int n, int sv, bool* visited)
{
	cout << sv << endl;
	visited[sv] = true;
	for (int i = 0; i < n; i++)
	{

		if (i == sv)
			continue;
		if (edges[sv][i] == 1 && !visited[i])
		{
			printDFS(edges, n, i, visited);
		}
	}
}
void DFS(int** edges, int n)
{
	bool* visited = new bool[n];
	for (int i = 0; i < n; i++)
	{
		visited[i] = false;
	}
	for (int i = 0; i < n; i++)
	{
		if (!visited[i])
		{
			printDFS(edges, n, i, visited);
		}
	}
}
void printBFS(int** edges, int n, int sv, bool* visited)
{
	queue<int> pendingVertices;
	pendingVertices.push(sv);
	visited[sv] = true;
	while (!pendingVertices.empty())
	{
		int front = pendingVertices.front();
		cout << front<<endl;
		pendingVertices.pop();
		for (int i = 0; i < n; i++)
		{
			if (i == front)
				continue;
			if (edges[front][i] == 1 && !visited[i])
			{
				pendingVertices.push(i);
				visited[i] = true;
			}
		}
		
	}
}
void BFS(int** edges, int n)
{
	bool* visited = new bool[n];
	for (int i = 0; i < n; i++)
	{
		visited[i] = false;
	}
	for(int i = 0; i < n; i++)
	{
		if (!visited[i])
		{
			printBFS(edges, n, i, visited);
		}
	}
}
int main()
{
	int n;
	cout << "enter the number of vertices" << endl;
	cin >> n;
	int e;
	cout << "enter the number of edges" << endl;
	cin >> e;
	int** edges = new int* [n];
	for (int i = 0; i < n; i++)
	{
		edges[i] = new int[n];
		for (int j = 0; j < n; j++)
		{
			edges[i][j] = 0;
		}
	}
	for (int i = 0; i < e; i++)
	{
		int f, s;
		cin >> f >> s;
		edges[f][s] = 1;
		edges[s][f] = 1;
	}
	BFS(edges, n);
	DFS(edges, n);
	return 0;
}
