#include<iostream>
#include<stack>
#include<string>
using namespace std;
bool valiParenthesis(string str) {
	stack<char> S;

	for (int i = 0; i < str.size(); i++)
	{
		if (str[i] == '{' || str[i] == '(' || str[i] == '[')
			S.push(str[i]);
		else if (str[i] == '}' && S.top() != '{')
			return false;
		else if (str[i] == '}' && S.top() == '{')
			S.pop();
		else if (str[i] == ')' && S.top() == '(')
			S.pop();
		else if (str[i] == ']' && S.top() == '[')
			S.pop();

		else if (str[i] == ')' && S.top() != '(')
			return false;
		else if (str[i] == ']' && S.top() != '[')
			return false;
	}
	if (S.empty())
		return true;
	return false;
}
int main() 
{
	string str = "{a+b*(e-f+[g*h]-h})";
	if (valiParenthesis(str))
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
	return 0;
}
