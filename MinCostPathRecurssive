#include<iostream>
#include<algorithm>
using namespace std;
int minCostPathHelper(int** input, int m, int n, int i, int j)
{
	//BASE CASE
	if (i == m - 1 && j == n - 1)
		return input[i][j];
	if (i >= m || j >= n)
		return INT_MAX;
	//RECURSSIVE CALLS 
	int x = minCostPathHelper(input, m, n, i, j + 1);
	int y = minCostPathHelper(input, m, n, i + 1, j + 1);
	int z = minCostPathHelper(input, m, n, i + 1, j);
	int ans = min(x, min(y, z)) + input[i][j];
	return ans;
}
int minCostPath(int** input, int m, int n)
{
	return minCostPathHelper(input, m, n, 0, 0);
}
int main()
{
	int m = 3;
	int n = 3;
	int** input = new int* [m];
	for (int i = 0; i < m; i++)
	{
		input[i] = new int[n];
		for (int j = 0; j < n; j++)
		{
			cin >> input[i][j];
		}
	}
	cout << minCostPath(input, m, n);
	return 0;
}
