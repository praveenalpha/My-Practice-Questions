#include<iostream>
#include<map>
#include<list>
#include<queue>
using namespace std;
template<typename t>
class graph {
	map<t, list<t>> adjList;
public:
	graph()
	{

	}
	void addEdges(t u, t v, bool bidir = true)
	{
		adjList[u].push_back(v);
		if (bidir)
			adjList[v].push_back(u);
	}
	void print()
	{
		for (auto i : adjList)
		{
			cout << i.first << "->";
			for (auto list : i.second)
				cout << list << ", ";;
			cout << '\n';
		}
	}
	void BFS(t src)
	{
		map<t, bool> visited;
		queue<t> q;
		q.push(src);
		visited[src] = true;
		while (q.empty())
		{
			t node = q.front();
			cout << node << endl;
			q.pop();
			for (auto entry : adjList[node])
			{
				if (!visited[entry])
				{
					visited[entry] = true;
					q.push(entry);
				}
			}
		}

	}
};
int main()
{
	graph<string> g;
	g.addEdges("putin", "modi", false);
	g.addEdges("putin", "trump", false);
	g.addEdges("putin", "pope", false);
	g.addEdges("modi", "trump", true);
	g.addEdges("modi", "yogi", true);
	g.addEdges("yogi", "prabhu", false);
	g.addEdges("prabhu", "modi", false);
	g.print();
	g.BFS("modi");
	return 0;
}
