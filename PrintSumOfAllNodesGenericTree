#include<iostream>
#include<vector>
#include<queue>
using namespace std;
class node {
public:
	int data;
	vector<node*> children;
	node(int data)
	{
		this->data = data;
	}
};
node* take_input()
{
	int data;
	cout << "Enter Root Data : " << endl;
	cin >> data;
	node* root = new node(data);
	queue<node*> pending_nodes;
	pending_nodes.push(root);
	while (pending_nodes.size() != 0)
	{
		node* front = pending_nodes.front();

		int n;
		cout << "enter number of children" <<"of"<<front->data<< endl;
		cin >> n;
		for (int i = 0; i < n; i++)
		{
			int child_data;
			cout << "enter childs name: " << endl;
			cin >> child_data;
			node* child = new node(child_data);
			pending_nodes.push(child);
			front->children.push_back(child);

			
		}
		pending_nodes.pop();
	}
	return root;
}
void print(node* root)
{
	queue<node*> pending_nodes;
	pending_nodes.push(root);
	while (pending_nodes.size() != 0)
	{
		node* front = pending_nodes.front();
		cout << front->data << endl;
		for (int i = 0; i < front->children.size(); i++)
		{
			pending_nodes.push(front->children[i]);
		}
		pending_nodes.pop();
	}
}
int sum(node* root)
{
	int sum = 0;
	if (root == nullptr)
		return sum = 0;
	queue<node*> pending_nodes;
	pending_nodes.push(root);
	while (pending_nodes.size() != 0)
	{
		node* front = pending_nodes.front();
		for (int i = 0; i < front->children.size(); i++)
		{
			pending_nodes.push(front->children[i]);
		}
		sum += front->data;
		pending_nodes.pop();
	}
	return sum;
}
int main()
{
	node* root = take_input();
	print(root);
	cout << sum(root);
	return 0;

}
